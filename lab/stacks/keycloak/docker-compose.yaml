version: "2"

services:
  keycloak_db:
    image: postgres:latest
    ports:
      - "15432:15432"
    environment:
        - POSTGRES_DB=keycloak
        - POSTGRES_USER=keycloak
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_ROOT_PASSWORD=${POSTGRES_ROOT_PASSWORD}
    volumes:
      - keycloak_postgresql:/var/lib/postgresql
      - keycloak_postgresql_data:/var/lib/postgresql/data

  keycloak:
      image: jboss/keycloak
      environment:
        - KEYCLOAK_LOGLEVEL=DEBUG
        - DB_VENDOR=postgres
        - DB_USER=keycloak
        - DB_DATABASE=keycloak
        - DB_PASSWORD=${DB_PASSWORD}
        - DB_PORT=5432
        - DB_ADDR=keycloak_db
        - KEYCLOAK_USER=admin
        - KEYCLOAK_PASSWORD=${KEYCLOAK_PASSWORD}
        - KEYCLOAK_STATISTICS=all
      links:
        - keycloak_db:postgres
      ports:
        - "18443:8443"
        - "18080:8080"
        - "19990:9990"
      volumes:
        - keycloak_data:/data
        - ./keycloak/providers:/opt/jboss/keycloak/providers
        - ./keycloak/standalone/configuration:/opt/jboss/keycloak/standalone/configuration
  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - keycloak:keycloak
  grafana:
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    ports:
      - 13000:3000
    volumes:      
      - grafana_data:/var/lib/grafana
      - ./grafana/plugins:/var/lib/grafana/plugins
    links:
      - prometheus:prometheus

# sleeps for a second on startup to allow the configure container to run first.
  teleport:
    image: quay.io/gravitational/teleport-lab:${TELEPORT_VERSION}
    container_name: teleport
    entrypoint: /bin/sh
    hostname: luna.teleport
    command: -c "/usr/bin/dumb-init teleport start -d -c /etc/teleport.d/teleport.yaml"
    ports:
      - "3023:3023"
      - "3024:3024"
      - "3025:3025"
      - "443:443"
    volumes:
      - config:/etc/teleport
      - data:/var/lib/teleport
      - certs:/mnt/shared/certs
    networks:
      teleport:
        aliases:
          - proxy.luna.teleport

  # The bootstrap container generates certificates and then immediately exits.
  bootstrap:
    image: quay.io/gravitational/teleport-lab:${TELEPORT_VERSION}
    container_name: teleport-bootstrap
    entrypoint: /bin/sh
    command: -c "/etc/teleport.d/scripts/generate-certs.sh"
    volumes:
      - config:/etc/teleport
      - data:/var/lib/teleport
      - certs:/mnt/shared/certs
    depends_on:
      - teleport
    networks:
      - teleport

  #
  # openssh is a demo of openssh node
  #
  openssh:
    image: quay.io/gravitational/teleport-lab:${TELEPORT_VERSION}
    container_name: openssh
    hostname: mars.openssh.teleport
    entrypoint: /bin/sh
    command: -c "/etc/teleport.d/scripts/start-sshd.sh"
    mem_limit: 300m
    volumes:
      - certs:/mnt/shared/certs
    depends_on:
      - bootstrap
    networks:
      teleport:
        aliases:
          - mars.openssh.teleport

  #
  # term is a container with a terminal to try things out
  #
  term:
    image: quay.io/gravitational/teleport-lab:${TELEPORT_VERSION}
    hostname: term
    container_name: term
    entrypoint: /bin/sh
    command: -c "sleep infinity"
    mem_limit: 300m
    volumes:
      - certs:/mnt/shared/certs
    depends_on:
      - bootstrap
    networks:
      - teleport

volumes: 
  keycloak_postgresql:
  keycloak_postgresql_data:
  keycloak_data:
  prometheus_data:
  grafana_data:
  volumes:
  certs:
  data:
  config:

networks:
  teleport:
